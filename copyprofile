# ------------------------------------------------------------
# –ú–æ–¥—É–ª—å: ProfileCopier
# –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π Telegram
# –ê–≤—Ç–æ—Ä: @user9927
# ------------------------------------------------------------

from .. import loader, utils
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest, UpdateEmojiStatusRequest
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
from telethon import types
import io
import base64
import logging
import asyncio

logger = logging.getLogger(__name__)

@loader.tds
class ProfileCopierMod(loader.Module):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π Telegram | by @oqesk"""
    strings = {
        "name": "ProfileCopier",
        "backup_saved": "üíæ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–∫–µ—Ä)!",
        "profile_copied": "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!",
        "profile_restored": "üîô –ü—Ä–æ—Ñ–∏–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–∫–µ—Ä)!",
        "help_msg": (
            "üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
            "<code>.backupprofile</code> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "<code>.copyprofile</code> - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "<code>.restoreprofile</code> - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        ),
        "premium_warning": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–∫–µ—Ä"
    }

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    async def backupprofilecmd(self, message):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–∫–µ—Ä)"""
        try:
            user = await self.client.get_me()
            full = await self.client(GetFullUserRequest(user.id))

            emoji_status = None
            if hasattr(user, 'emoji_status') and user.emoji_status:
                emoji_status = user.emoji_status.document_id

            backup = {
                "first_name": user.first_name or "",
                "last_name": user.last_name or "",
                "about": full.full_user.about or "",
                "avatar": None,
                "emoji_status": emoji_status
            }

            photos = await self.client.get_profile_photos(user.id)
            if photos:
                photo = await self.client.download_media(photos[0], bytes)
                if isinstance(photo, bytes):
                    backup["avatar"] = base64.b64encode(photo).decode('utf-8')

            self.db.set("ProfileCopier", "backup", backup)
            await utils.answer(message, self.strings["backup_saved"])

        except Exception as e:
            logger.error(f"Backup error: {e}", exc_info=True)
            await utils.answer(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    async def copyprofilecmd(self, message):
        """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–æ–π –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            args = utils.get_args_raw(message)
            reply = await message.get_reply_message()

            if args:
                user = await self.client.get_entity(args)
            elif reply:
                user = await reply.get_sender()
            else:
                await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return

            full = await self.client(GetFullUserRequest(user.id))

            photos = await self.client.get_profile_photos(user.id)
            if photos:
                await self.client(DeletePhotosRequest(
                    await self.client.get_profile_photos("me")
                ))
                photo = await self.client.download_media(photos[0])
                await self.client(UploadProfilePhotoRequest(
                    file=await self.client.upload_file(photo)
                ))

            await self.client(UpdateProfileRequest(
                first_name=user.first_name or "",
                last_name=user.last_name or "",
                about=full.full_user.about[:70] if full.full_user.about else ""
            ))

            if hasattr(user, 'emoji_status') and user.emoji_status:
                try:
                    await self.client(UpdateEmojiStatusRequest(
                        types.EmojiStatus(user.emoji_status.document_id)
                    ))
                except Exception as e:
                    logger.error(f"Emoji status error: {e}", exc_info=True)
                    await utils.answer(message, self.strings["premium_warning"])

            msg = await utils.answer(message, self.strings["profile_copied"])
            await asyncio.sleep(3)
            await msg.delete()

        except Exception as e:
            logger.error(f"Copy error: {e}", exc_info=True)
            await utils.answer(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    async def restoreprofilecmd(self, message):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–∫–µ—Ä)"""
        try:
            backup = self.db.get("ProfileCopier", "backup")
            if not backup:
                await utils.answer(message, "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!")
                return

            if backup.get("avatar"):
                photo_bytes = base64.b64decode(backup["avatar"].encode('utf-8'))
                photo_file = await self.client.upload_file(
                    io.BytesIO(photo_bytes),
                    file_name="photo.jpg"
                )
                await self.client(UploadProfilePhotoRequest(file=photo_file))

            await self.client(UpdateProfileRequest(
                first_name=backup.get("first_name", ""),
                last_name=backup.get("last_name", ""),
                about=backup.get("about", "")
            ))

            if backup.get("emoji_status"):
                try:
                    await self.client(UpdateEmojiStatusRequest(
                        types.EmojiStatus(backup["emoji_status"])
                    ))
                except Exception as e:
                    logger.error(f"Emoji restore error: {e}", exc_info=True)

            await utils.answer(message, self.strings["profile_restored"])

        except Exception as e:
            logger.error(f"Restore error: {e}", exc_info=True)
            await utils.answer(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    async def watcher(self, message):
        if getattr(message, "command", None) == "help":
            await utils.answer(message, self.strings["help_msg"])
