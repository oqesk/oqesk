# –ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
# meta developer: @oqesk

from .. import loader, utils
from hikkatl.types import Message
import asyncio

@loader.tds
class SpamDeleteMod(loader.Module):
    """–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º"""
    strings = {
        "name": "EblaSpam",
        "args": "‚úñÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>.ebla [—Ç–µ–∫—Å—Ç] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code>",
        "num_error": "‚úñÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (1-1000)",
        "limit_error": "‚úñÔ∏è –ú–∞–∫—Å–∏–º—É–º 1000 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "start": "üîÑ –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º...",
        "done": "‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã",
        "stopped": "‚èπÔ∏è –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        "not_running": "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∞–º–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    }

    def __init__(self):
        self.is_spamming = False
        self.current_task = None

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(ru_doc="[—Ç–µ–∫—Å—Ç] [–∫–æ–ª-–≤–æ] - –°–ø–∞–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º")
    async def eblacmd(self, message: Message):
        """–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∞–≤—Ç–æ–ø–æ–¥—á–∏—Å—Ç–∫–æ–π"""
        if self.is_spamming:
            await utils.answer(message, "‚úñÔ∏è –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.eblaoff</code> –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return

        args = utils.get_args_raw(message)
        
        if not args:
            await utils.answer(message, self.strings("args"))
            return

        try:
            parts = args.rsplit(" ", 1)
            if len(parts) < 2:
                raise ValueError
            text, count = parts
            count = int(count)
        except ValueError:
            await utils.answer(message, self.strings("args"))
            return

        if count <= 0:
            await utils.answer(message, self.strings("num_error"))
            return
        
        if count > 1000:
            await utils.answer(message, self.strings("limit_error"))
            return

        await utils.answer(message, self.strings("start"))
        await message.delete()

        self.is_spamming = True
        self.current_task = asyncio.create_task(self._spam_task(message, text, count))

    async def _spam_task(self, message, text, count):
        try:
            for i in range(count):
                if not self.is_spamming:
                    break
                    
                msg = await self._client.send_message(
                    message.peer_id,
                    text,
                    silent=True
                )
                await asyncio.sleep(0.3)
                await msg.delete()
                await asyncio.sleep(0.3)
        finally:
            self.is_spamming = False
            if self.is_spamming:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é
                notify = await message.respond(self.strings("stopped"))
            else:  # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                notify = await message.respond(self.strings("done"))
            await asyncio.sleep(3)
            await notify.delete()

    @loader.command(ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∞–º")
    async def eblaoffcmd(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∞–º"""
        if not self.is_spamming:
            await utils.answer(message, self.strings("not_running"))
            return
            
        self.is_spamming = False
        if self.current_task:
            self.current_task.cancel()
        await utils.answer(message, self.strings("stopped"))
        # –ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
# meta developer: @oqesk

from .. import loader, utils
from hikkatl.types import Message
import asyncio

@loader.tds
class SpamDeleteMod(loader.Module):
    """–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º"""
    strings = {
        "name": "EblaSpam",
        "args": "‚úñÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>.ebla [—Ç–µ–∫—Å—Ç] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code>",
        "num_error": "‚úñÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (1-1000)",
        "limit_error": "‚úñÔ∏è –ú–∞–∫—Å–∏–º—É–º 1000 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "start": "üîÑ –ù–∞—á–∏–Ω–∞—é —Å–ø–∞–º...",
        "done": "‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã",
        "stopped": "‚èπÔ∏è –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        "not_running": "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∞–º–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
    }

    def __init__(self):
        self.is_spamming = False
        self.current_task = None

    async def client_ready(self, client, db):
        self._client = client

    @loader.command(ru_doc="[—Ç–µ–∫—Å—Ç] [–∫–æ–ª-–≤–æ] - –°–ø–∞–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º")
    async def eblacmd(self, message: Message):
        """–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∞–≤—Ç–æ–ø–æ–¥—á–∏—Å—Ç–∫–æ–π"""
        if self.is_spamming:
            await utils.answer(message, "‚úñÔ∏è –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>.eblaoff</code> –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return

        args = utils.get_args_raw(message)
        
        if not args:
            await utils.answer(message, self.strings("args"))
            return

        try:
            parts = args.rsplit(" ", 1)
            if len(parts) < 2:
                raise ValueError
            text, count = parts
            count = int(count)
        except ValueError:
            await utils.answer(message, self.strings("args"))
            return

        if count <= 0:
            await utils.answer(message, self.strings("num_error"))
            return
        
        if count > 1000:
            await utils.answer(message, self.strings("limit_error"))
            return

        await utils.answer(message, self.strings("start"))
        await message.delete()

        self.is_spamming = True
        self.current_task = asyncio.create_task(self._spam_task(message, text, count))

    async def _spam_task(self, message, text, count):
        try:
            for i in range(count):
                if not self.is_spamming:
                    break
                    
                msg = await self._client.send_message(
                    message.peer_id,
                    text,
                    silent=True
                )
                await asyncio.sleep(0.3)
                await msg.delete()
                await asyncio.sleep(0.3)
        finally:
            self.is_spamming = False
            if self.is_spamming:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é
                notify = await message.respond(self.strings("stopped"))
            else:  # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                notify = await message.respond(self.strings("done"))
            await asyncio.sleep(3)
            await notify.delete()

    @loader.command(ru_doc="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∞–º")
    async def eblaoffcmd(self, message: Message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∞–º"""
        if not self.is_spamming:
            await utils.answer(message, self.strings("not_running"))
            return
            
        self.is_spamming = False
        if self.current_task:
            self.current_task.cancel()
        await utils.answer(message, self.strings("stopped"))
        await asyncio.sleep(3)
        await message.delete()await asyncio.sleep(3)
        await message.delete()
